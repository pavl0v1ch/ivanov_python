# Импортируется класс datetime из модуля datetime.
# Он используется для получения текущего времени.
from datetime import datetime


# Определяется функция log_calls, принимающая имя файла для логирования.
# Она возвращает декоратор, который будет логировать вызовы целевой функции.
def log_calls(filename):
    # Внутри создаётся функция-декоратор, принимающая функцию func.
    def decorator(func):
        # Обёртка wrapper будет вызываться вместо оригинальной функции.
        # Она записывает информацию о вызове функции в указанный файл.
        def wrapper(*args, **kwargs):
            # Получается текущее время в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС".
            time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # Открывается файл в режиме добавления.
            # В файл записывается строка с временем, именем функции и её аргументами.
            with open(filename, "a", encoding="utf-8") as f:
                f.write(f"{time} | {func.__name__} | args={args}, kwargs={kwargs}\n")

            # После логирования вызывается оригинальная функция.
            return func(*args, **kwargs)

        # Возвращается обёртка, которая заменит оригинальную функцию.
        return wrapper

    # Возвращается сам декоратор, готовый к применению.
    return decorator



if __name__ == "__main__":
    # К функции greet применяется декоратор log_calls.
    # Все вызовы greet будут логироваться в файл "call_log.txt".
    @log_calls("call_log.txt")
    def greet(name):
        print(f"Привет, {name}!")  # Функция выводит приветствие с указанным именем


    greet("Python")


    greet("Минск")
