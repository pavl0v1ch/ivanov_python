# Импортируется модуль time, который используется для измерения времени выполнения.
import time


# Определяется функция-декоратор timing, принимающая функцию func.
# Цель — измерить и вывести время выполнения функции в миллисекундах.
def timing(func):
    # Обёртка wrapper будет вызываться вместо оригинальной функции.
    def wrapper(*args, **kwargs):
        start = time.time()  # Засекается время начала выполнения.

        result = func(*args, **kwargs)  # Вызывается оригинальная функция.

        end = time.time()  # Засекается время окончания выполнения.

        duration_ms = (end - start) * 1000  # Вычисляется длительность в миллисекундах.

        # Выводится имя функции и время её выполнения.
        print(f"Время выполнения {func.__name__}: {duration_ms:.2f} мс")

        return result  # Возвращается результат работы функции.

    return wrapper  # Возвращается обёртка, заменяющая оригинальную функцию.



if __name__ == "__main__":

    # К функции compute применяется декоратор timing.
    # Это означает, что при её вызове будет измерено и выведено время выполнения.
    @timing
    def compute():
        total = 0
        for i in range(1000000):  # Выполняется простая операция суммирования.
            total += i
        return total  # Возвращается итоговая сумма.


    compute()  # Вызывается функция, и одновременно выводится её время выполнения.
